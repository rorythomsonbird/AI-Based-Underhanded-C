PROJECT DIARY

14/09/2023
research what underhanded c contest is

29/09/2023
begin working on project plan, work on timeline

30/09/2023
finish timeline, work on risks and mitigations

02/10/2023
Begin abstract. Research packages that could be used in the project such as scikit learn and csnake

03/10/2023
API found that is a third party API for GPT. I will be using this as is free and easy to use. I will dedicate today in getting it running.

After a while of trying to get it to work i found in the github notes that this project had been abandoned due to OpenAIs crackdown on third  party APIs in order to force users to pay them. I refuse to pay.

04/10/2023
Research APIs for usage, GPT would be ideal but requires money to run therefore I will use Llama as is free to use.

05/10/2023
Llama requires a hefty download which for markers and users will provide problems. Llama does not use the cloud and is hosted on own host. This will mean that alot of processing power is required. 
I have now paid 10USD to use the GPT API which is less than ideal.
Finished report and have submitted.

08/10/2023
Research and implement GPTAPI communicator using VSCode as my IDE and using https://holypython.com/python-api-tutorial/openai-gpt-4-api-quick-guide/?utm_content=cmp-true as a guide

Added a main class to call all other potential classes and use as the class to run in this project.
Created a MalwareCheck class and give it the functionality of reading files. this class will at some point be able to check if a file contains malware by getting the API to look at it and judge. 
Created a check function to ask GPT if a file contains malware and then built a new class called RandomCGen and then make this able to generate C code.
Make the C code be written to files, divide up the samples provided by the LLM first, I then stopped code from overwriting itself.
I then used prompt engineering to make GPT perform more aligned to how I want it to(make it believe that it is a skilled C developer that enjoys writing C code)

Today was a busy day so for the next few days I will try to do less work.

09/10/2023
Today I made a compile code function so that in future when code is written it can immediately be compiled. It does not work yet so I will do that tomorrow.

10/10/2023
Dear Diary, today I made the compile function work

12/10/2023
I made the compile function compile code immediately by calling the function during the code generation
Tomorrow I will clean everything up and optimise the code

15/10/2023
I did not do any work in the last few days unfortunately.
Today I removed alot of unnecessary files and made the amount of samples generated customisable. I also optimised the code by stopping the malwarecheck function from trying to compile already compiled code.

18/10/2023
Today I tried a lazy method of fixing a bug(where the final produced file had no final curly bracket) by adding a curly bracket at the end, I'm sure this will become a problem in the future.
I also added some tests in a test file where one of the tests had a problem where instead of the LLm replying with "hello" like i wanted it would instead code the word hello. This was a result of over prompt engineering.

19/10/2023
Today I decided that I wanted to start working on a GUI so I made a class to begin working on this but I have no idea how to use Tkinter so I will need to research that

25/10/2023
I have spent the past week researching Tkinter and playing with GUIs
GeeksForGeeks has been an invaluable resource in the usage of Tkinter https://www.geeksforgeeks.org/python-tkinter-tutorial/
Today I built a GUI that I have recorded the progress of in a word document.
I also removed the automatic } adder that i mentioned on the 18th which, as predicted, started to cause problems

29/10/2023
I removed the automatic call for compiling code when generated as i now wanted it to be compiled manually in the GUI
I also continued working on the GUI

30/10/2023
Added debug ability and continued working on GUI





15/12/2023
I have successfully broken GPTs ethical restrictions. This was accomplished by asking GPT which of the programs is most vulnerable to underhanded code.
Once this was answered I asked if it was sure and then I asked GPT for an example and received an underhanded code snippet. Success!!

